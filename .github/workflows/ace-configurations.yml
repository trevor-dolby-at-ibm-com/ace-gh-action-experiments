# This is a basic workflow to help you get started with Actions

name: Generate Configurations

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request events but only for the "main" branch
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - '**-generated*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a set of commands using the runners shell
      - name: Scan for changed files
        #env: 
        #  GH_TOKEN: ${{ github.token }} 
        run: |
          #!/bin/bash
          
          echo Creating a new directory
          mkdir new-checkout
          cd new-checkout
          #set -x
          #nv | sort
          git config --global user.email "trevor.dolby@ibm.com"
          git config --global user.name "Trevor Dolby (automation)"
          git config --global --add --bool push.autoSetupRemote true

          export BRANCH_NAME=${GITHUB_HEAD_REF}
          if [ "$BRANCH_NAME" == "" ]; then
            export BRANCH_NAME="$GITHUB_REF_NAME"
          fi
          echo "########################################################################"
          echo "# Cloning a new copy of the repo using the correct credentials"
          echo "# Repo    ${GITHUB_REPOSITORY}"
          echo "# Branch  ${BRANCH_NAME}"
          echo "########################################################################"
          echo ${{ secrets.GH_PAT }} | gh auth login --with-token
          gh auth setup-git
          git clone -b ${BRANCH_NAME} https://github.com/${GITHUB_REPOSITORY}
          export REPO_NAME=$(basename `echo $GITHUB_REPOSITORY`)
          cd $REPO_NAME

          echo "########################################################################"
          echo "# Checking for policy projects to be encoded as CP4i Configurations"
          echo "########################################################################"
          ./find-and-convert-policies.sh
          echo "########################################################################"
          echo "# Checking for server.conf.yamls to be encoded as CP4i Configurations"
          echo "########################################################################"
          ./find-and-convert-serverconf.sh

          # Check to see if anything changed
          if [ `git status --porcelain=1 | grep generated | wc -l` -ne 0 ]; then
            export DATE=$(date '+%Y%m%d%H%M%S')
            export COMMIT=$(git log -1 --pretty=%h)
            export TAG="$DATE"-"$COMMIT"
            export MSG="Generator commit $TAG"
            echo "########################################################################"
            echo "# Generated files changed - creating and pushing git commit:"
            echo "# \"$MSG\""
            echo "########################################################################"
            git add . 
            git status
            git remote -v
            git commit -m "$MSG" && git push 
          else
            echo "########################################################################"
            echo "# Nothing new generated - not creating a new git commit"
            echo "########################################################################"
          fi
